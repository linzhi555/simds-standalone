// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: simlet.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimletServerClient is the client API for SimletServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimletServerClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	UpdateRouterTable(ctx context.Context, in *RouterTable, opts ...grpc.CallOption) (*Response, error)
}

type simletServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSimletServerClient(cc grpc.ClientConnInterface) SimletServerClient {
	return &simletServerClient{cc}
}

func (c *simletServerClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/svc.simletServer/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simletServerClient) UpdateRouterTable(ctx context.Context, in *RouterTable, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/svc.simletServer/UpdateRouterTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimletServerServer is the server API for SimletServer service.
// All implementations should embed UnimplementedSimletServerServer
// for forward compatibility
type SimletServerServer interface {
	SendMessage(context.Context, *Message) (*Response, error)
	UpdateRouterTable(context.Context, *RouterTable) (*Response, error)
}

// UnimplementedSimletServerServer should be embedded to have forward compatible implementations.
type UnimplementedSimletServerServer struct {
}

func (UnimplementedSimletServerServer) SendMessage(context.Context, *Message) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSimletServerServer) UpdateRouterTable(context.Context, *RouterTable) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouterTable not implemented")
}

// UnsafeSimletServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimletServerServer will
// result in compilation errors.
type UnsafeSimletServerServer interface {
	mustEmbedUnimplementedSimletServerServer()
}

func RegisterSimletServerServer(s grpc.ServiceRegistrar, srv SimletServerServer) {
	s.RegisterService(&SimletServer_ServiceDesc, srv)
}

func _SimletServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimletServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.simletServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimletServerServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimletServer_UpdateRouterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimletServerServer).UpdateRouterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.simletServer/UpdateRouterTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimletServerServer).UpdateRouterTable(ctx, req.(*RouterTable))
	}
	return interceptor(ctx, in, info, handler)
}

// SimletServer_ServiceDesc is the grpc.ServiceDesc for SimletServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimletServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.simletServer",
	HandlerType: (*SimletServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _SimletServer_SendMessage_Handler,
		},
		{
			MethodName: "UpdateRouterTable",
			Handler:    _SimletServer_UpdateRouterTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simlet.proto",
}
